#!/usr/bin/env python3
"""
–ì–ª–∞–≤–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è –ø–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—é –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
—Ä–∞–∑–ª–∏—á–Ω—ã—Ö –ø–æ–¥—Ö–æ–¥–æ–≤ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∏–Ω—Ñ–µ—Ä–µ–Ω—Å–∞ –Ω–µ–π—Ä–æ–Ω–Ω—ã—Ö —Å–µ—Ç–µ–π.

"""

import os
import sys
import argparse
import subprocess
import time

def check_dependencies():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
    required_packages = [
        'torch', 'torchvision', 'onnx', 'onnxruntime', 
        'numpy', 'matplotlib', 'seaborn', 'pandas', 
        'tqdm', 'PIL', 'psutil', 'GPUtil'
    ]
    
    missing_packages = []
    
    for package in required_packages:
        try:
            __import__(package)
        except ImportError:
            missing_packages.append(package)
    
    if missing_packages:
        print("–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–∞–∫–µ—Ç—ã:")
        for package in missing_packages:
            print(f"   - {package}")
        print("\n–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∏—Ö –∫–æ–º–∞–Ω–¥–æ–π:")
        print("pip install -r requirements.txt")
        return False
    
    print("–í—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
    return True

def check_gpu():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å GPU"""
    try:
        import torch
        if torch.cuda.is_available():
            gpu_name = torch.cuda.get_device_name(0)
            gpu_memory = torch.cuda.get_device_properties(0).total_memory / 1024**3
            print(f"GPU –æ–±–Ω–∞—Ä—É–∂–µ–Ω: {gpu_name}")
            print(f"–ü–∞–º—è—Ç—å: {gpu_memory:.1f} GB")
            return True
        else:
            print("GPU –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω, –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω CPU")
            return False
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ GPU: {e}")
        return False

def run_training():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π"""
    print("\n" + "="*60)
    print("–®–ê–ì 1: –û–ë–£–ß–ï–ù–ò–ï –ú–û–î–ï–õ–ï–ô")
    print("="*60)
    
    if not os.path.exists('train_models.py'):
        print("–§–∞–π–ª train_models.py –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
    
    try:
        print("–ó–∞–ø—É—Å–∫ –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–µ–π ResNet-18...")
        result = subprocess.run([sys.executable, 'train_models.py'], 
                              capture_output=True, text=True)
        
        if result.returncode == 0:
            print("–û–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
            return True
        else:
            print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—É—á–µ–Ω–∏–∏:")
            print(result.stderr)
            return False
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –æ–±—É—á–µ–Ω–∏—è: {e}")
        return False

def run_benchmark():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–µ–Ω—á–º–∞—Ä–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
    print("\n" + "="*60)
    print("–®–ê–ì 2: –ë–ï–ù–ß–ú–ê–†–ö –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò")
    print("="*60)
    
    if not os.path.exists('benchmark.py'):
        print("–§–∞–π–ª benchmark.py –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
    
    try:
        print("–ó–∞–ø—É—Å–∫ –±–µ–Ω—á–º–∞—Ä–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏...")
        result = subprocess.run([sys.executable, 'benchmark.py'], 
                              capture_output=True, text=True)
        
        if result.returncode == 0:
            print("–ë–µ–Ω—á–º–∞—Ä–∫ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            return True
        else:
            print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –±–µ–Ω—á–º–∞—Ä–∫–µ:")
            print(result.stderr)
            return False
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–µ–Ω—á–º–∞—Ä–∫–∞: {e}")
        return False

def generate_report():
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç"""
    print("\n" + "="*60)
    print("–®–ê–ì 3: –ì–ï–ù–ï–†–ê–¶–ò–Ø –û–¢–ß–ï–¢–ê")
    print("="*60)
    
    if not os.path.exists('generate_report.py'):
        print("–§–∞–π–ª generate_report.py –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
    
    try:
        print("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞...")
        result = subprocess.run([sys.executable, 'generate_report.py'], 
                              capture_output=True, text=True)
        
        if result.returncode == 0:
            print("–û—Ç—á–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
            return True
        else:
            print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞:")
            print(result.stderr)
            return False
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞: {e}")
        return False

def show_results():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã"""
    print("\n" + "="*60)
    print("–†–ï–ó–£–õ–¨–¢–ê–¢–´")
    print("="*60)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–æ–≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    result_files = [
        'benchmark_results.json',
        'benchmark_results.png',
        'detailed_benchmark_analysis.png',
        'benchmark_report.txt'
    ]
    
    for file in result_files:
        if os.path.exists(file):
            print(f"{file}")
        else:
            print(f"{file} - –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ–±—É—á–µ–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π
    model_files = [
        'weights/best_resnet18_224.pth',
        'weights/best_resnet18_256.pth',
        'weights/best_resnet18_384.pth',
        'weights/best_resnet18_512.pth'
    ]
    
    print("\n–û–±—É—á–µ–Ω–Ω—ã–µ –º–æ–¥–µ–ª–∏:")
    for model in model_files:
        if os.path.exists(model):
            size = os.path.getsize(model) / 1024**2  # MB
            print(f"{model} ({size:.1f} MB)")
        else:
            print(f"{model} - –Ω–µ –Ω–∞–π–¥–µ–Ω")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    parser = argparse.ArgumentParser(description='–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –Ω–µ–π—Ä–æ–Ω–Ω—ã—Ö —Å–µ—Ç–µ–π')
    parser.add_argument('--skip-training', action='store_true', 
                       help='–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π')
    parser.add_argument('--skip-benchmark', action='store_true', 
                       help='–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –±–µ–Ω—á–º–∞—Ä–∫')
    parser.add_argument('--skip-report', action='store_true', 
                       help='–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –æ—Ç—á–µ—Ç–∞')
    parser.add_argument('--only-report', action='store_true', 
                       help='–¢–æ–ª—å–∫–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞')
    
    args = parser.parse_args()
    
    print("üöÄ –ó–ê–ü–£–°–ö –ü–†–û–ï–ö–¢–ê: –°–†–ê–í–ù–ï–ù–ò–ï –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–ò")
    print("="*80)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    if not check_dependencies():
        return
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ GPU
    check_gpu()
    
    # –ï—Å–ª–∏ —Ç–æ–ª—å–∫–æ –æ—Ç—á–µ—Ç
    if args.only_report:
        generate_report()
        show_results()
        return
    
    # –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π
    if not args.skip_training:
        if not run_training():
            print("–û–±—É—á–µ–Ω–∏–µ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –æ—à–∏–±–∫–∏ –≤—ã—à–µ.")
            return
    
    # –ë–µ–Ω—á–º–∞—Ä–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    if not args.skip_benchmark:
        if not run_benchmark():
            print("–ë–µ–Ω—á–º–∞—Ä–∫ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –æ—à–∏–±–∫–∏ –≤—ã—à–µ.")
            return
    
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞
    if not args.skip_report:
        if not generate_report():
            print("–û—Ç—á–µ—Ç –Ω–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –æ—à–∏–±–∫–∏ –≤—ã—à–µ.")
            return
    
    # –ü–æ–∫–∞–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    show_results()
    
    print("\n" + "="*80)
    print("–ü–†–û–ï–ö–¢ –ó–ê–í–ï–†–®–ï–ù –£–°–ü–ï–®–ù–û!")
    print("="*80)
    print("\n–°–æ–∑–¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã:")
    print("- benchmark_results.json - —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –±–µ–Ω—á–º–∞—Ä–∫–∞")
    print("- benchmark_results.png - –æ—Å–Ω–æ–≤–Ω—ã–µ –≥—Ä–∞—Ñ–∏–∫–∏")
    print("- detailed_benchmark_analysis.png - –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑")
    print("- benchmark_report.txt - —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á–µ—Ç")
    print("\n–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –æ—Ç–∫—Ä–æ–π—Ç–µ —Ñ–∞–π–ª—ã –≤—ã—à–µ.")

if __name__ == "__main__":
    main() 