#!/usr/bin/env python3
"""
–ü–æ–ª–Ω—ã–π –∑–∞–ø—É—Å–∫ –ø—Ä–æ–µ–∫—Ç–∞: –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ + –ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏–µ FLOPS
"""

import os
import sys
import subprocess
import time
from datetime import datetime

def print_header():
    """–í—ã–≤–æ–¥–∏—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ –ø—Ä–æ–µ–∫—Ç–∞"""
    print("=" * 80)
    print("–ü–û–õ–ù–´–ô –ó–ê–ü–£–°–ö –ü–†–û–ï–ö–¢–ê: –°–†–ê–í–ù–ï–ù–ò–ï –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–ò")
    print("=" * 80)
    print(f"–î–∞—Ç–∞ –∑–∞–ø—É—Å–∫–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print()

def check_files():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ñ–∞–π–ª–æ–≤"""
    required_files = [
        'main.py',
        'train_models.py', 
        'benchmark.py',
        'generate_report.py',
        'flops_profiler.py',
        'requirements.txt',
        'README.md'
    ]
    
    missing_files = []
    for file in required_files:
        if not os.path.exists(file):
            missing_files.append(file)
    
    if missing_files:
        print("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ñ–∞–π–ª—ã:")
        for file in missing_files:
            print(f"   - {file}")
        return False
    
    print(" –í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ–∞–π–ª—ã –Ω–∞–π–¥–µ–Ω—ã")
    return True

def run_step(step_name, script_name, description):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –æ—Ç–¥–µ–ª—å–Ω—ã–π —à–∞–≥ –ø—Ä–æ–µ–∫—Ç–∞"""
    print(f"\n{'='*60}")
    print(f"–®–ê–ì: {step_name}")
    print(f"{'='*60}")
    print(f"–û–ø–∏—Å–∞–Ω–∏–µ: {description}")
    print()
    
    if not os.path.exists(script_name):
        print(f"–§–∞–π–ª {script_name} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
    
    try:
        print(f"–ó–∞–ø—É—Å–∫ {script_name}...")
        start_time = time.time()
        
        result = subprocess.run([sys.executable, script_name], 
                              capture_output=True, text=True)
        
        end_time = time.time()
        duration = end_time - start_time
        
        if result.returncode == 0:
            print(f" {step_name} –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ –∑–∞ {duration:.1f} —Å–µ–∫—É–Ω–¥")
            return True
        else:
            print(f" –û—à–∏–±–∫–∞ –≤ {step_name}:")
            print(result.stderr)
            return False
            
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ {script_name}: {e}")
        return False

def show_final_results():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã"""
    print("\n" + "="*80)
    print(" –§–ò–ù–ê–õ–¨–ù–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´")
    print("="*80)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    result_files = [
        'benchmark_results.json',
        'benchmark_results.png', 
        'detailed_benchmark_analysis.png',
        'benchmark_report.txt',
        'flops_analysis.json',
        'flops_utilization_analysis.png'
    ]
    
    print("–°–æ–∑–¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:")
    for file in result_files:
        if os.path.exists(file):
            size = os.path.getsize(file) / 1024  # KB
            print(f"{file} ({size:.1f} KB)")
        else:
            print(f" {file} - –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–æ–¥–µ–ª–∏
    model_files = [
        'weights/best_resnet18_224.pth',
        'weights/best_resnet18_256.pth',
        'weights/best_resnet18_384.pth', 
        'weights/best_resnet18_512.pth'
    ]
    
    print("\n–û–±—É—á–µ–Ω–Ω—ã–µ –º–æ–¥–µ–ª–∏:")
    for model in model_files:
        if os.path.exists(model):
            size = os.path.getsize(model) / 1024**2  # MB
            print(f" {model} ({size:.1f} MB)")
        else:
            print(f" {model} - –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    print("\n" + "="*80)
    print("üìä –ê–ù–ê–õ–ò–ó –†–ï–ó–£–õ–¨–¢–ê–¢–û–í")
    print("="*80)
    
    print("1. benchmark_results.json - –¥–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –±–µ–Ω—á–º–∞—Ä–∫–∞")
    print("2. benchmark_results.png - –æ—Å–Ω–æ–≤–Ω—ã–µ –≥—Ä–∞—Ñ–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏")
    print("3. detailed_benchmark_analysis.png - –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ (6 –≥—Ä–∞—Ñ–∏–∫–æ–≤)")
    print("4. benchmark_report.txt - —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á–µ—Ç")
    print("5. flops_analysis.json - –∞–Ω–∞–ª–∏–∑ FLOPS –∏ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ—Å—Ç–∏")
    print("6. flops_utilization_analysis.png - –≥—Ä–∞—Ñ–∏–∫–∏ FLOPS –∏ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ—Å—Ç–∏")
    
    print("\nüìà –ö–ª—é—á–µ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏:")
    print("- FPS –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–¥—Ö–æ–¥–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏")
    print("- –£—Å–∫–æ—Ä–µ–Ω–∏–µ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ PyTorch")
    print("- –í–ª–∏—è–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å")
    print("- –û–ø—Ç–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –±–∞—Ç—á–∞")
    print("- –ó–∞–≥—Ä—É–∂–µ–Ω–Ω–æ—Å—Ç—å GPU/CPU")
    print("- FLOPS –∞–Ω–∞–ª–∏–∑")
    
    print("\nüîç –í–æ–ø—Ä–æ—Å—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:")
    print("1. –ö–∞–∫–æ–π –ø–æ–¥—Ö–æ–¥ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ª—É—á—à—É—é –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å?")
    print("2. –ö–∞–∫ —Ä–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤–ª–∏—è–µ—Ç –Ω–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å?")
    print("3. –ö–∞–∫ —Ä–∞–∑–º–µ—Ä –±–∞—Ç—á–∞ –≤–ª–∏—è–µ—Ç –Ω–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å?")
    print("4. –ö–∞–∫–∞—è –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ—Å—Ç—å –∂–µ–ª–µ–∑–∞ –¥–æ—Å—Ç–∏–≥–∞–µ—Ç—Å—è?")
    print("5. –ö–∞–∫–∏–µ –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –≤–∞—à–µ–π —Å–∏—Å—Ç–µ–º—ã?")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print_header()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤
    if not check_files():
        print("–ü—Ä–æ–µ–∫—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–ø—É—â–µ–Ω –∏–∑-–∑–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö —Ñ–∞–π–ª–æ–≤")
        return
    
    # –®–∞–≥ 1: –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π
    if not run_step(
        "–û–ë–£–ß–ï–ù–ò–ï –ú–û–î–ï–õ–ï–ô", 
        "train_models.py",
        "–û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π ResNet-18 –¥–ª—è —Ä–∞–∑–º–µ—Ä–æ–≤ 224x224, 256x256, 384x384, 512x512"
    ):
        print("–û–±—É—á–µ–Ω–∏–µ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –æ—à–∏–±–∫–∏ –≤—ã—à–µ.")
        return
    
    # –®–∞–≥ 2: –ë–µ–Ω—á–º–∞—Ä–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    if not run_step(
        "–ë–ï–ù–ß–ú–ê–†–ö –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò",
        "benchmark.py", 
        "–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ PyTorch, ONNX, TensorRT/ROCm"
    ):
        print("–ë–µ–Ω—á–º–∞—Ä–∫ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –æ—à–∏–±–∫–∏ –≤—ã—à–µ.")
        return
    
    # –®–∞–≥ 3: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞
    if not run_step(
        "–ì–ï–ù–ï–†–ê–¶–ò–Ø –û–¢–ß–ï–¢–ê",
        "generate_report.py",
        "–°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–æ–≤ –∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞"
    ):
        print("–û—Ç—á–µ—Ç –Ω–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –æ—à–∏–±–∫–∏ –≤—ã—à–µ.")
        return
    
    # –®–∞–≥ 4: –ü—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏–µ FLOPS
    if not run_step(
        "–ü–†–û–§–ò–õ–ò–†–û–í–ê–ù–ò–ï FLOPS",
        "flops_profiler.py",
        "–ê–Ω–∞–ª–∏–∑ FLOPS –∏ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ—Å—Ç–∏ –∂–µ–ª–µ–∑–∞"
    ):
        print("–ü—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏–µ FLOPS –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –æ—à–∏–±–∫–∏ –≤—ã—à–µ.")
        return
    
    # –ü–æ–∫–∞–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    show_final_results()
    
    print("\n" + "="*80)
    print(" –ü–†–û–ï–ö–¢ –£–°–ü–ï–®–ù–û –ó–ê–í–ï–†–®–ï–ù!")
    print("="*80)
    print("\nüìã –ß—Ç–æ –±—ã–ª–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ:")
    print("–û–±—É—á–µ–Ω—ã –º–æ–¥–µ–ª–∏ ResNet-18 –¥–ª—è 4 —Ä–∞–∑–º–µ—Ä–æ–≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
    print("–ü—Ä–æ–≤–µ–¥–µ–Ω –±–µ–Ω—á–º–∞—Ä–∫ 3 –ø–æ–¥—Ö–æ–¥–æ–≤ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏")
    print("–°–æ–∑–¥–∞–Ω—ã –≥—Ä–∞—Ñ–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏")
    print("–í—ã–ø–æ–ª–Ω–µ–Ω –∞–Ω–∞–ª–∏–∑ FLOPS –∏ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ—Å—Ç–∏")
    print("–û–ø—Ä–µ–¥–µ–ª–µ–Ω—ã –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã")
    

if __name__ == "__main__":
    main() 